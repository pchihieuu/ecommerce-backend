name: Ecommerce CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  build:
    runs-on: self-hosted
    strategy:
      matrix:
        node-version: [22.x]

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Check and start Docker containers
      run: |
        # Test and start MongoDB container
        if ! docker ps | grep mongodb; then
          echo "MongoDB container is not running. Starting container..."
          docker start mongodb || docker run --name mongodb -d -p 27017:27017 mongodb/mongodb-community-server:latest
        else
          echo "MongoDB container is already running."
        fi
        
        # Test RabbitMQ containers (including stopped containers)
        if docker ps -a | grep rabbitMQ; then
          echo "RabbitMQ container exists. Checking status..."
          if docker ps | grep rabbitMQ; then
            echo "RabbitMQ container is running. Checking port mapping..."
            if docker port rabbitMQ | grep "5672->15672"; then
              echo "Incorrect port mapping detected. Restarting RabbitMQ container with correct mapping..."
              docker stop rabbitMQ
              docker rm rabbitMQ
              docker run --name rabbitMQ -d -p 5672:5672 -p 15672:15672 rabbitmq:3-management
            else
              echo "RabbitMQ container is running with correct port mapping."
            fi
          else
            echo "RabbitMQ container exists but is not running. Starting with correct port mapping..."
            docker rm rabbitMQ
            docker run --name rabbitMQ -d -p 5672:5672 -p 15672:15672 rabbitmq:3-management
          fi
        else
          echo "RabbitMQ container does not exist. Creating new container..."
          docker run --name rabbitMQ -d -p 5672:5672 -p 15672:15672 rabbitmq:3-management
        fi
        
        # Show running containers
        echo "Current running containers:"
        docker ps
        
        # Show RabbitMQ port mapping
        echo "RabbitMQ port mapping:"
        docker port rabbitMQ

    - name: Check if Redis is running
      run: |
        # Check if Redis is running
        if ! pgrep -x "redis-server" > /dev/null; then
          echo "Redis server is not running. Starting Redis..."
          sudo systemctl start redis || sudo service redis-server start || redis-server &
        else
          echo "Redis server is already running."
        fi
        # Test Redis connection
        redis-cli ping || echo "Failed to connect to Redis. Please make sure Redis is installed and running."

    - name: Create .env file
      run: |
        echo "NODE_ENV=${{secrets.NODE_ENV}}" > .env
        echo "DEV_APP_PORT=${{ secrets.DEV_APP_PORT }}" >> .env
        
        # Update MongoDB connection to use local container
        echo "DEV_DB_HOST=localhost" >> .env
        echo "DEV_DB_PORT=27017" >> .env
        echo "DEV_DB_NAME=${{ secrets.DEV_DB_NAME }}" >> .env
        echo "PRO_DB_HOST=localhost" >> .env
        echo "PRO_DB_PORT=27017" >> .env
        echo "PRO_DB_NAME=${{ secrets.PRO_DB_NAME }}" >> .env
        
        echo "TOKEN_DISCORD=${{ secrets.TOKEN_DISCORD }}" >> .env
        echo "CHANNEL_ID=${{ secrets.CHANNEL_ID }}" >> .env
        
        # Update Redis connection
        echo "REDIS_HOST=localhost" >> .env
        echo "REDIS_PORT=6379" >> .env
        
        # Update RabbitMQ connection to use local container with correct port
        echo "RABBITMQ_HOST=localhost" >> .env
        echo "RABBITMQ_PORT=5672" >> .env
        echo "RABBITMQ_USERNAME=${{ secrets.RABBITMQ_USERNAME }}" >> .env
        echo "RABBITMQ_PASSWORD=${{ secrets.RABBITMQ_PASSWORD }}" >> .env
        echo "RABBITMQ_VHOST=${{ secrets.RABBITMQ_VHOST }}" >> .env
        
        echo "CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }}" >> .env
        echo "CLOUDINARY_API_KEY=${{ secrets.CLOUDINARY_API_KEY }}" >> .env
        echo "CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }}" >> .env
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME}}" >> .env
        echo "AWS_BUCKET_ACCESS_KEY=${{ secrets.AWS_BUCKET_ACCESS_KEY }}" >> .env
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
        echo "AWS_CLOUDFRONT_DOMAIN=${{ secrets.AWS_CLOUDFRONT_DOMAIN }}" >> .env
        echo "AWS_CLOUDFRONT_PUBLIC_KEY_ID=${{ secrets.AWS_CLOUDFRONT_PUBLIC_KEY_ID }}" >> .env
        echo "AWS_CLOUDFRONT_PRIVATE_KEY=${{ secrets.AWS_CLOUDFRONT_PRIVATE_KEY }}" >> .env
        echo "AWS_EMAIL_APP_USER=${{ secrets.AWS_EMAIL_APP_USER }}" >> .env
        echo "AWS_EMAIL_APP_PASSWORD=${{ secrets.AWS_EMAIL_APP_PASSWORD }}" >> .env
        echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env

    - name: Debug .env file
      run: |
        pwd
        ls -la
        echo "Checking if .env exists:"
        test -f .env && echo ".env file exists"

    - name: Wait for services to start
      run: |
        echo "Waiting for services to fully start..."
        sleep 10
        
        # Test MongoDB connection
        echo "Testing MongoDB connection..."
        docker exec mongodb mongosh --eval "db.adminCommand('ping')" || echo "Failed to connect to MongoDB"
        
        # Test RabbitMQ connection
        echo "Testing RabbitMQ connection..."
        if command -v amqp-tools >/dev/null 2>&1; then
          amqp-ping -h localhost -p 5672 || echo "Failed to connect to RabbitMQ"
        else
          echo "AMQP tools not installed, skipping RabbitMQ connection test"
        fi

    - name: Stop existing PM2 instance
      run: |
        # Check if PM2 is installed
        if ! command -v pm2 &> /dev/null; then
          echo "PM2 not found. Installing PM2..."
          npm install pm2 -g
        fi
        
        # Check if the application is already running and stop it
        echo "Checking for existing instances of the application..."
        pm2 list | grep ecommerce-backend && pm2 stop ecommerce-backend && pm2 delete ecommerce-backend
        echo "Any previous instances have been stopped"

    - name: Check for running processes on the port
      run: |
        PORT=$(grep DEV_APP_PORT .env | cut -d= -f2 || echo "3056")
        echo "Checking processes on port $PORT"
        # Find and kill any process using the port
        sudo lsof -i :$PORT | grep LISTEN || echo "No process found on port $PORT"
        sudo fuser -k $PORT/tcp || echo "No process killed"

    - name: Deploy with PM2
      run: |
        # Start new instance with PM2
        echo "Starting application with PM2..."
        pm2 start src/server.js --name="ecommerce-backend" --time
        
        # Save PM2 configuration
        pm2 save
        
        # Display running processes
        echo "Current PM2 processes:"
        pm2 list
        
        # Check the application logs
        echo "Recent application logs:"
        pm2 logs --lines 20 ecommerce-backend --nostream
